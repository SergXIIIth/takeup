#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

unless respond_to?(:y)
  def y(obj); obj.to_yaml(:line_width => 999) end
end

use_color = ENV['TERM'] !~ /dumb/i
POLLING_INTERVAL = 0.2

command_options = {}

options_parser = OptionParser.new do |opts|
  opts.banner = "Usage: takeup [command] [options]"

  opts.on('-d', '--debug', 'Let commands print all their output') do |debug_switch|
    command_options[:debug] = debug_switch
  end
end

options_parser.parse!(ARGV)
ARGV.select{ |a| a.strip =~ /^-/ }.map{|a| ARGV.delete(a)}

project_root = Dir.pwd
project_name = File.basename(project_root)
debug_mode = command_options[:debug]

host = `hostname -s`.strip;
conf_takeup_dir = "#{project_root}/config/takeup/#{host}"
root_takeup_dir = "#{project_root}/.takeup/#{host}"
home_takeup_dir = "#{File.expand_path("~/.takeup")}/#{project_name}"

def manifest_found_in?(dir)
  File.exist?("#{dir}/manifest.yml")
end

support_root = [ home_takeup_dir,
                 root_takeup_dir,
                 conf_takeup_dir ].find{ |dir| manifest_found_in?(dir) }

if support_root.nil?
  paths_snippet = <<-PATHS
  - #{home_takeup_dir}/manifest.yml
  - #{root_takeup_dir}/manifest.yml
  - #{conf_takeup_dir}/manifest.yml
PATHS

  paths_snippet = "\e[32m#{paths_snippet}\e[0m" if use_color

  puts <<-TEXT
Manifest for #{project_name} doesn't exist. Please create it in one of the following paths:
#{paths_snippet}
TEXT

  exit(1)
end

config = YAML.load(File.read("#{support_root}/manifest.yml"))

interpolator = lambda do |*args|
  string = args[0]
  extras = args[1] || {}

  if string
    result = string.dup
    result.gsub!(':project_root', project_root)
    result.gsub!(':project_name', project_name)
    result.gsub!(':support_root', support_root)

    extras.each_pair do |key, value|
      result.gsub!(key, value) if value
    end

    result
  end
end

processes = []

config.each do |process|
  pid_file = interpolator.call(process['pid_file'])

  processes << { 'name'     => process['name'],
                 'pid_file' => pid_file,
                 'start'    => interpolator.call(process['start'], ':pid_file' => pid_file),
                 'stop'     => interpolator.call(process['stop'], ':pid_file' => pid_file),
                 'required' => !!process['required'] }
end

def running?(process)
  File.exist?(process['pid_file'])
end

def wait_until(process, state)
  return if process['pid_file'].nil?

  if state == :running
    while !running?(process)
      sleep POLLING_INTERVAL
    end
  elsif state == :stopped
    while running?(process)
      sleep POLLING_INTERVAL
    end
  end
end

pid_checker = lambda do
  entries = []

  running = use_color ? "\e[32mon\e[0m" : 'on'
  off = use_color ? "\e[31moff\e[0m" : 'off'

  processes.each do |process|
    if process['pid_file']
      name = process['name'] || File.basename(process['pid_file']).sub('.pid', '')
      status = running?(process) ? running : off
      entries << [name, status]
    end
  end

  entries
end

project_title = use_color ? "\e[32m#{project_name.capitalize}\e[0m" : project_name.capitalize
skipped = use_color ? "\e[31m   - skipped\e[0m" : '   - skipped'
projects_regex = /^(?:#{processes.map{|p| p['name'] && Regexp.escape(p['name'])}.compact.join('|')})$/

find_process = lambda do |proc_name|
  processes.find{ |p| p['name'] == proc_name }
end

run_command = lambda do |command|
  cmd = command.dup

  if debug_mode
    puts `#{cmd}`
  else
    cmd << '  > /dev/null 2>&1'
    system cmd
  end
end

start_process = lambda do |process|
  if process['start'] && (process['pid_file'].nil? || !running?(process))
    if process['name']
      puts "-> Starting #{process['name']}"
    end

    run_command.call(process['start'])
    wait_until process, :running

  elsif process['pid_file'] && running?(process)
    if process['name']
      puts "-> Starting #{process['name']}"
    end

    puts skipped
  end
end

stop_process = lambda do |process|
  if process['stop'] && (process['pid_file'].nil? || running?(process))
    if process['name']
      puts "-> Stopping #{process['name']}"
    end

    run_command.call(process['stop'])
    wait_until process, :stopped

  elsif process['pid_file'] && !running?(process)
    if process['name']
      puts "-> Stopping #{process['name']}"
    end

    puts skipped
  end
end

restart_process = lambda do |process|
  stop_process.call(process)
  wait_until process, :stopped
  start_process.call(process)
end

def decorate(title)
  puts "\n#{title}\n"
  yield
  puts "\n"
end

def argv(num)
  ARGV[num].to_s.strip
end

case argv(0)

when ''
  decorate(project_title) do
    processes.each{ |p| start_process.call(p) }
  end

when 'manifest'
  decorate(project_title) do
    puts y(processes)
  end

when 'minimal'
  decorate("#{project_title} (minimal)") do
    processes.select{ |p| p['required'] }.each{|p| start_process.call(p) }
  end

when 'restart'
  decorate(project_title) do
    if argv(1) =~ projects_regex
      p = find_process.call(argv(1))
      restart_process.call(p)
    elsif argv(1).empty?
      processes.reverse.each{ |p| stop_process.call(p) }
      processes.each{ |p| start_process.call(p) }
    else
      next
    end
  end

when projects_regex
  decorate(project_title) do
    p = find_process.call(argv(0))
    start_process.call(p)
  end

when /^(?:down|stop|quit)$/i
  decorate(project_title) do
    if argv(1) =~ projects_regex
      p = find_process.call(argv(1))
      stop_process.call(p)
    elsif argv(1).empty?
      processes.reverse.each{ |p| stop_process.call(p) }
    else
      next
    end
  end

when /^(?:status|st)$/i
  entries = pid_checker.call
  width = entries.map(&:first).max_by(&:size).to_s.size + 6

  entries = entries.map do |entry|
    "#{entry.first}".ljust(width) + entry.last
  end

  statuses = entries.empty? ? 'no pids defined' : entries.join("\n  ")
  decorate(project_title) { puts "  #{statuses}" }

else
  puts 'Error: command not recognized.'
end
